generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String         @id @default(uuid())
    username      String         @unique
    password      String
    role          Role           @default(COMMENTATOR)
    refreshTokens RefreshToken[]
    posts         Post[]
    comments      Comment[]
    createdAt     DateTime       @default(now())
}

model RefreshToken {
    id        String   @id @default(uuid())
    token     String   @unique
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
}

model Post {
    id        String     @id @default(uuid())
    name      String     @db.VarChar(255)
    content   String     @db.Text
    status    PostStatus @default(DRAFT)
    author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String
    tags      Tag[]      @relation("PostTag")
    postTag   PostTag[]
    comment   Comment[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model Comment {
    id        String   @id @default(uuid())
    text      String   @db.Text
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tag {
    id        String    @id @default(uuid())
    name      String    @unique @db.VarChar(50)
    posts     Post[]    @relation("PostTag")
    postTag   PostTag[]
    createdAt DateTime  @default(now())
}

model PostTag {
    postId String
    tagId  String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@id([postId, tagId])
}

enum Role {
    READER // user can only read posts (unregistered user)
    COMMENTATOR // user can comment posts
    ADMIN // COMMENTATOR + CRUD posts + can delete posts of other people (it's me ;))
}

enum PostStatus {
    DRAFT
    PUBLISHED
}
